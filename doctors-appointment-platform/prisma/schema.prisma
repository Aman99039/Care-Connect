generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(uuid())
  clerkUserId         String              @unique
  email               String              @unique
  name                String?
  imageUrl            String?
  role                UserRole            @default(UNASSIGNED)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  credits             Int                 @default(2)
  specialty           String?
  experience          Int?
  credentialUrl       String?
  description         String?
  verificationStatus  VerificationStatus? @default(PENDING)
  orgAddress          String?
  orgContactNumber    String?
  orgMission          String?
  orgName             String?
  organizationId      String?
  volExperienceLevel  String?
  volLanguages        String?
  volSkills           String?
  doctorAppointments  Appointment[]       @relation("DoctorAppointments")
  patientAppointments Appointment[]       @relation("PatientAppointments")
  availabilities      Availability[]
  transactions        CreditTransaction[]
  payouts             Payout[]
  organization        User?               @relation("OrganizationVolunteers", fields: [organizationId], references: [id])
  volunteers          User[]              @relation("OrganizationVolunteers")
  events        Event[]          @relation("UserEvents")
  eventAttendee EventAttendee[]
}

model Availability {
  id        String     @id @default(uuid())
  doctorId  String
  startTime DateTime
  endTime   DateTime
  status    SlotStatus @default(AVAILABLE)
  doctor    User       @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId, startTime])
}

model Appointment {
  id                 String            @id @default(uuid())
  patientId          String
  doctorId           String
  status             AppointmentStatus @default(SCHEDULED)
  notes              String?
  patientDescription String?
  videoSessionId     String?
  videoSessionToken  String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  endTime            DateTime
  startTime          DateTime
  doctor             User              @relation("DoctorAppointments", fields: [doctorId], references: [id])
  patient            User              @relation("PatientAppointments", fields: [patientId], references: [id])

  @@index([status, startTime])
  @@index([doctorId, startTime])
}

model CreditTransaction {
  id        String          @id @default(uuid())
  userId    String
  amount    Int
  type      TransactionType
  packageId String?
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payout {
  id          String       @id @default(uuid())
  doctorId    String
  amount      Float
  credits     Int
  platformFee Float
  netAmount   Float
  paypalEmail String
  status      PayoutStatus @default(PROCESSING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  processedAt DateTime?
  processedBy String?
  doctor      User         @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
  @@index([doctorId, status])
}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
  ADMIN
  ORGANIZATION
  VOLUNTEER
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum TransactionType {
  CREDIT_PURCHASE
  APPOINTMENT_DEDUCTION
  ADMIN_ADJUSTMENT
}

enum PayoutStatus {
  PROCESSING
  PROCESSED
}

model Event {
  id          String           @id @default(uuid())
  title       String
  description String?
  startsAt    DateTime?
  endsAt      DateTime?
  location    String?
  capacity    Int?
  isPublished Boolean          @default(false)

  organizerId String
  organizer   User             @relation("UserEvents", fields: [organizerId], references: [id])

  attendees   EventAttendee[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model EventAttendee {
  id      String   @id @default(uuid())
  userId  String
  eventId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, eventId]) // ensures one user canâ€™t register twice for same event
}